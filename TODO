Roadmap
-------

To do
"""""

- remove redundant from . import log from files
- look at removing sh dependency
- socket-name, socket-path support for .server instance and tmux commands
- tmux command should be from server, since it will rely on the contexxt of the
  socket-name, socket-path
- move tests to use socket-name and socket-path
- allow run_tests.py and main.py to accept a CLI arg of a PID, or pass it in via
  adding an os.environ['TMUXP_CLIENT_PID'], which can be used to SIGINT the
  process http://stackoverflow.com/a/1112350
- or detach see if detaching works (on tests, new server is created)

- To a degree, be able to pull running tmux sessions, windows and panes
  into Session, Window, and Pane objects and therefore be exportable
  into configs. A la, many attempts before, a ``pip freeze``.
- The biggest difficulty is keeping the abstraction of tmux pure and
  pythonic.
- A workflow to test a configuration file, launch tmux session/windows/panes
  with a ctrl-a ``tbd`` to ``kill-session`` and monitor config file for changes,
  lint it, create a new session, switch to it, and ``kill-session`` the old
  one.
- Check for ``.hg`` and ``.git`` in ``$HOME/.tmuxp``, set a
  notification if it is out of date.
- Have ``freeze`` check for ``virtualenv``, ``rvm``, ``perlbrew`` and add
  it to the ``before_cmd``.
- grab pane when new_session created
- session.new_window
- create session.[windowindex] = Window or session.w.[window index] = Window ?
- session.to_yaml() export config to yaml
- session.to_yaml().save('filename')
- session.from_yaml().load('filename')
- cli: allow loading session   tmw filename.{yaml, json, ..} to load,
  - catch has-session, prompt to rename
  - possibility: open to ``-t`` group session to target?
- cli: and definitely bashcomplete json/yaml/ini files + commands
- cli: replicate tmux commands too
- window.split_pane to split-pane
- experiment: have windows with 1 pane have access to pane objects?
- have session inherit  window methods of the current active window
  such as session.next_layout is now available
- have window inherit some pane methods of current pane? only if just 1?
- experiment: using .send-keys can be done on session, window and pane
  level for power?
- experiment: Server object for managing / orchestrating across sessions?
- pane.send_keys for send-keys
- tmux session config generator
  - log god: scan /var/log /opt/etc/var/log/ for apache2, nginx, Xorg and
    create a session with windows reading logs of common 90% cases.
  - web warrior: check for apache2/nginx/php/supervisor/upstart etc dirs
    and make a session for that.
  - dot config: check for .vim .config/awesome .tmux.conf and make a
    session with windows for those config files
- feature like `z` to attach search session name / windows name / pane
  directory, pane apps, and finally buffers to attach directly to that
  session.  note `find-window` does this.
- docs in this style?
  http://docs.python-guide.org/en/latest/notes/styleguide/
- should ._TMUX metadata make passing Session and Window objects into new
  Window and Pane objects obsolete? look at thread locals / global
- contextmanager's and with to iterate over a server, session, window
- contextmanager iterate for all panes that have an attribute (directory,
  window_name, etc)
- global for server, contains sessions, attribute _session and
  _window object references global / thread local
- ipython notebook try using fbcat + imagemagick convert to see results
  of tmux changes.  fbgrab + tty works well for demonstration
- also look into scrot, x11 solutions and
  https://github.com/KittyKatt/screenFetch
- control mode, for longer tmuxp sessions where references to
  objects are needed to be updated and shown they've gone stale (a pane
  object that has been closed needs to be changed to being stale, a window
  object that has been renamed needs to have its window_name updated)
- and one more thing
- vim: may be used inside of a pane object with a filename (relative to
  the pane dir, also accepts /) and vim windows may be split and opened
- support for importing teamocil and tmuxinator configs
- creating a pane / window should return the new object, then refresh the
  parent (list_sessions for server, list_windows for session, list_panes
  for window).
- renaming or moving a pane should always return the object session,
  window or pane object and flush/refresh the contents of the tmux server
  objects (sessions, windows, panes).
- if an object is removed from the list, any reference to it should be
  changed. since python doesn't use pointers/references like other
  languages, a pubsub like blinker http://pythonhosted.org/blinker/ or ee
  https://github.com/jesusabdullah/pyee.
- remove ._TMUX, use collections.MutableMapping. check for {session,
  window,pane}_id to see if its a live tmux object. use kwargs.pop() for
  session, window, pane.
- create and test a compact / inline config format.
- a C-type of binding to pull server/session/window/pane information
  directly from tmux.
- support for show-options and setting options via ``.options`` on session
  and window.
- automatically handle rename-window when the value of the window-name is
  set. this gives an abstraction of tmux that is then 'model-driven' like
  backbone js, but also a pythonic abstraction.
- unit test roadmap.
  - test schema, types of objects
  - parsing of config types. export of config types
  - config expand
  - config inliner script
  - config passthru / hierarchy
  - export a current tmux session to tmux objects, then config
  - data driven tmux, handle options, renames
  - swapping windows using objects, swapping panes using Pane objects,
    linking or moving windows via Session.
- remember that new-window without ``shell-command`` with run option
  ``default-command`` if used.
- remove unnecessary kwargs, use optional kwargs in params to keep it
  clean.
- sphinx docs
- before_cmd, after_cmd:
  tbd, but commands will be able to be go before/after commands on any
  level also. for instance, session may run before_cmd: and all windows
  and panes within will run accordingly
- make session, window, pane chainable by returning self
- make Server.sessions, Session.windows, Windows.panes return a list, let
  Server.refresh().sessions be chainable to return sessions object.
- Create a list of chainable items. .rename_window, .rename_session are
  chainable.
- config precedence

    ::

       session(s)
           1. cmds (str like 'htop' or list ['pwd', 'htop'])
           2. root (str dir path, like '/var/www')
           3. window(s)
                1. cmd(s)
                2. root
                3. panes(s)
                     1. dimensions
                     2. cmd(s)
                     3. root

    cmd, cwd can be added at the session, window and pane level.

    the deepest will have precedence. a command or cwd at the session level
    will apply to all windows, panes within it. a command or cwd at window
    level applies to all panes. a pane may specify its own cmd.
- create sliderepl quickstart
- bug in tmux as of 09/10/2013 - control mode will resize an
  'attach-session' and switching `aggressive_resize` and using
  `force_width`, `force_height` doesn't seem to work.
- if no tmux session is live for tests, perhaps context managers can
  async wrap tmux -C.
- use pane_id, window_id, session_id in targets.
- need to fix two use cases:
  1. no client but, list-sessions has results - but no client. raise
     exception? use tmux -C wrapper for unit tests? prompt user to make a
     tmux session?
  2. no client, no sessions
- check for list_clients
- check for list_sessions
- Check if tmux 1.8 (has control mode)
- Unit tests for tmux < 1.7, unit tests require a tmux open in another
  terminal.
- tmux -C commands pass-thru if version is > 1.8
- Server check if 'connect' exists.
- Server socket option
